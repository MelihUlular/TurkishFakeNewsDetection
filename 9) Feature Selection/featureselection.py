# -*- coding: utf-8 -*-
"""FeatureSelection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m21Vxy5nW05heu85rALSNSoznpRPBj7n
"""

import pandas as pd
# Reading dataset
data_path = 'new_linguistic_data.csv'
df = pd.read_csv(data_path, error_bad_lines=False)

df.head()

df['Label'] = df['Label'].replace({'yalan': 0, 'gerçek': 1})
df["sentiment"].replace({"positive": 1, "negative": 0}, inplace=True)

df.head()

df["sentiment"]

features = ["character_count", "word_count", "letter_count",
                      "total_number_of_upper_characters", "total_number_of_lower_characters",
                      "number_of_special_character", "short_words", "long_words", "number_of_different_words","unique_word_types_count"
                      ,"verb_count","adjective_count","determiners_count","conjunction_count","noun_count",
                      "adverb_count","preposition_count","pronoun_count",
                      "number_count","sentiment","CARDINAL","DATE","EVENT","FAC","GPE",
            "LANGUAGE","LAW","LOC","MONEY","NORP","ORDINAL","ORG","PERCENT","PERSON","PRODUCT","QUANTITY","TIME","WORK_OF_ART"]
target = ['Label']

X = df[features].values
y = df[target].values

#df.head()

"""**LOGISTIC REGRESSİON**

"""

from sklearn.feature_selection import SelectFromModel
from sklearn.linear_model import LogisticRegression
import numpy as np

best_features = SelectFromModel(LogisticRegression())
best_features.fit(X, y)

transformedX = best_features.transform(X)
print(f"Old Shape: {X.shape}, New shape: {transformedX.shape}")
print("Selected features: ", best_features.get_support())
print("Selected features: ", np.array(features)[best_features.get_support(indices=True)])

#transformedX[:5]

"""%30 test - %70 train"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score , confusion_matrix
from sklearn.metrics import precision_score, recall_score, f1_score,classification_report

X_train, X_test, y_train, y_test = train_test_split(transformedX, y, test_size=0.3)

model = LogisticRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
y_predictions = model.predict(X_test)
conf_matrix = confusion_matrix(y_test, y_predictions)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Classification Report:\n", classification_report(y_test, y_pred))
print(f'Confussion matrix: \n{conf_matrix}\n')


print("Accuracy:", accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred, average='weighted'))
print("Recall:", recall_score(y_test, y_pred, average='weighted'))
print("F1 score:", f1_score(y_test, y_pred, average='weighted'))

"""%20 test %80 train"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score , confusion_matrix
from sklearn.metrics import precision_score, recall_score, f1_score,classification_report

X_train, X_test, y_train, y_test = train_test_split(transformedX, y, test_size=0.2)

model = LogisticRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
y_predictions = model.predict(X_test)
conf_matrix = confusion_matrix(y_test, y_predictions)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Classification Report:\n", classification_report(y_test, y_pred))
print(f'Confussion matrix: \n{conf_matrix}\n')


print("Accuracy:", accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred, average='weighted'))
print("Recall:", recall_score(y_test, y_pred, average='weighted'))
print("F1 score:", f1_score(y_test, y_pred, average='weighted'))

"""**DECISION TREE CLASSIFIER**"""

from sklearn.tree import DecisionTreeClassifier

from sklearn.feature_selection import SelectFromModel

import numpy as np

best_features = SelectFromModel(DecisionTreeClassifier())
best_features.fit(X, y)

transformedX = best_features.transform(X)
print(f"Old Shape: {X.shape}, New shape: {transformedX.shape}")
print("Selected features: ", best_features.get_support())
print("Selected features: ", np.array(features)[best_features.get_support(indices=True)])

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score , confusion_matrix
from sklearn.metrics import precision_score, recall_score, f1_score,classification_report

X_train, X_test, y_train, y_test = train_test_split(transformedX, y, test_size=0.3)

model = (DecisionTreeClassifier())
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
y_predictions = model.predict(X_test)
conf_matrix = confusion_matrix(y_test, y_predictions)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Classification Report:\n", classification_report(y_test, y_pred))
print(f'Confussion matrix: \n{conf_matrix}\n')

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred, average='weighted'))
print("Recall:", recall_score(y_test, y_pred, average='weighted'))
print("F1 score:", f1_score(y_test, y_pred, average='weighted'))

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score , confusion_matrix
from sklearn.metrics import precision_score, recall_score, f1_score,classification_report

X_train, X_test, y_train, y_test = train_test_split(transformedX, y, test_size=0.2)

model = (DecisionTreeClassifier())
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
y_predictions = model.predict(X_test)
conf_matrix = confusion_matrix(y_test, y_predictions)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Classification Report:\n", classification_report(y_test, y_pred))
print(f'Confussion matrix: \n{conf_matrix}\n')

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred, average='weighted'))
print("Recall:", recall_score(y_test, y_pred, average='weighted'))
print("F1 score:", f1_score(y_test, y_pred, average='weighted'))

"""**LinearSVC**"""

from sklearn.svm import LinearSVC

from sklearn.feature_selection import SelectFromModel

import numpy as np

best_features = SelectFromModel(LinearSVC())
best_features.fit(X, y)

transformedX = best_features.transform(X)
print(f"Old Shape: {X.shape}, New shape: {transformedX.shape}")
print("Selected features: ", best_features.get_support())
print("Selected features: ", np.array(features)[best_features.get_support(indices=True)])

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score , confusion_matrix
from sklearn.metrics import precision_score, recall_score, f1_score,classification_report

X_train, X_test, y_train, y_test = train_test_split(transformedX, y, test_size=0.3)

model = (LinearSVC())
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
y_predictions = model.predict(X_test)
conf_matrix = confusion_matrix(y_test, y_predictions)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Classification Report:\n", classification_report(y_test, y_pred))
print(f'Confussion matrix: \n{conf_matrix}\n')

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred, average='weighted'))
print("Recall:", recall_score(y_test, y_pred, average='weighted'))
print("F1 score:", f1_score(y_test, y_pred, average='weighted'))

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score , confusion_matrix
from sklearn.metrics import precision_score, recall_score, f1_score,classification_report

X_train, X_test, y_train, y_test = train_test_split(transformedX, y, test_size=0.2)

model = (LinearSVC())
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
y_predictions = model.predict(X_test)
conf_matrix = confusion_matrix(y_test, y_predictions)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Classification Report:\n", classification_report(y_test, y_pred))
print(f'Confussion matrix: \n{conf_matrix}\n')

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred, average='weighted'))
print("Recall:", recall_score(y_test, y_pred, average='weighted'))
print("F1 score:", f1_score(y_test, y_pred, average='weighted'))

"""Random Forest

"""

from sklearn.ensemble import RandomForestClassifier

from sklearn.feature_selection import SelectFromModel

import numpy as np

best_features = SelectFromModel(RandomForestClassifier())
best_features.fit(X, y)

transformedX = best_features.transform(X)
print(f"Old Shape: {X.shape}, New shape: {transformedX.shape}")
print("Selected features: ", best_features.get_support())
print("Selected features: ", np.array(features)[best_features.get_support(indices=True)])

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score , confusion_matrix
from sklearn.metrics import precision_score, recall_score, f1_score,classification_report

X_train, X_test, y_train, y_test = train_test_split(transformedX, y, test_size=0.3)

model = (RandomForestClassifier())
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
y_predictions = model.predict(X_test)
conf_matrix = confusion_matrix(y_test, y_predictions)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Classification Report:\n", classification_report(y_test, y_pred))
print(f'Confussion matrix: \n{conf_matrix}\n')

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred, average='weighted'))
print("Recall:", recall_score(y_test, y_pred, average='weighted'))
print("F1 score:", f1_score(y_test, y_pred, average='weighted'))

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score , confusion_matrix
from sklearn.metrics import precision_score, recall_score, f1_score,classification_report

X_train, X_test, y_train, y_test = train_test_split(transformedX, y, test_size=0.2)

model = (RandomForestClassifier())
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
y_predictions = model.predict(X_test)
conf_matrix = confusion_matrix(y_test, y_predictions)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Classification Report:\n", classification_report(y_test, y_pred))
print(f'Confussion matrix: \n{conf_matrix}\n')

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred, average='weighted'))
print("Recall:", recall_score(y_test, y_pred, average='weighted'))
print("F1 score:", f1_score(y_test, y_pred, average='weighted'))

"""Gradient Boosting """

from sklearn.ensemble import GradientBoostingClassifier

from sklearn.feature_selection import SelectFromModel

import numpy as np

best_features = SelectFromModel(GradientBoostingClassifier())
best_features.fit(X, y)

transformedX = best_features.transform(X)
print(f"Old Shape: {X.shape}, New shape: {transformedX.shape}")
print("Selected features: ", best_features.get_support())
print("Selected features: ", np.array(features)[best_features.get_support(indices=True)])

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score , confusion_matrix
from sklearn.metrics import precision_score, recall_score, f1_score,classification_report

X_train, X_test, y_train, y_test = train_test_split(transformedX, y, test_size=0.3)

model = (GradientBoostingClassifier())
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
y_predictions = model.predict(X_test)
conf_matrix = confusion_matrix(y_test, y_predictions)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Classification Report:\n", classification_report(y_test, y_pred))
print(f'Confussion matrix: \n{conf_matrix}\n')

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred, average='weighted'))
print("Recall:", recall_score(y_test, y_pred, average='weighted'))
print("F1 score:", f1_score(y_test, y_pred, average='weighted'))

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score , confusion_matrix
from sklearn.metrics import precision_score, recall_score, f1_score,classification_report

X_train, X_test, y_train, y_test = train_test_split(transformedX, y, test_size=0.2)

model = (GradientBoostingClassifier())
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
y_predictions = model.predict(X_test)
conf_matrix = confusion_matrix(y_test, y_predictions)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Classification Report:\n", classification_report(y_test, y_pred))
print(f'Confussion matrix: \n{conf_matrix}\n')

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred, average='weighted'))
print("Recall:", recall_score(y_test, y_pred, average='weighted'))
print("F1 score:", f1_score(y_test, y_pred, average='weighted'))